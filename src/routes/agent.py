from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional
from src.executors.telegram_executor import TelegramExecutor

router = APIRouter(prefix="/agent", tags=["agent"])

class ChatRequest(BaseModel):
    message: str
    
class ChatResponse(BaseModel):
    intent: str
    params: Dict[str, Any]
    response: str

class TelegramRequest(BaseModel):
    message: str
    
    class Config:
        json_schema_extra = {
            "example": {
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Rentier –±–æ—Ç–∞! üè†"
            }
        }

class TelegramResponse(BaseModel):
    success: bool
    message: str
    
    class Config:
        json_schema_extra = {
            "example": {
                "success": True,
                "message": "Message sent successfully"
            }
        }

@router.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º
    """
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    message = request.message.lower()
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–æ—Ç–ø—Ä–∞–≤—å" –∏–ª–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "—Ç–µ–ª–µ–≥—Ä–∞–º",
    # —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    if ("–æ—Ç–ø—Ä–∞–≤—å" in message or "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in message) and "—Ç–µ–ª–µ–≥—Ä–∞–º" in message:
        return {
            "intent": "send_telegram",
            "params": {"message": message},
            "response": "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"
        }
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç
    return {
        "intent": "chat",
        "params": {},
        "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ —É–º–µ—é —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"
    }

@router.post("/execute")
async def execute(intent: str, params: Dict[str, Any]):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    """
    if intent == "send_telegram":
        executor = TelegramExecutor()
        result = await executor.execute(params)
        return result
    
    raise HTTPException(status_code=400, detail=f"Unknown intent: {intent}")

@router.post("/telegram/send", response_model=TelegramResponse, tags=["telegram"])
async def send_telegram(request: TelegramRequest):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    
    –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—ÄÔøΩÔøΩ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - TELEGRAM_BOT_TOKEN
    - TELEGRAM_DEFAULT_CHAT_ID
    
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```json
    {
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Rentier –±–æ—Ç–∞! üè†"
    }
    ```
    """
    executor = TelegramExecutor()
    result = await executor.execute({
        "message": request.message
    })
    return result 